(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[67],{HahS:function(e,t,n){"use strict";n.r(t);var o=n("q1tI"),r=n.n(o),a=n("dEAq"),l=n("H1Ra"),i=r.a.memo((e=>{e.demos;return r.a.createElement(r.a.Fragment,null,r.a.createElement("div",{className:"markdown"},r.a.createElement("ul",null,r.a.createElement("li",null,r.a.createElement(a["Link"],{to:"https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/"},"114.\u4e8c\u53c9\u6811\u5c55\u5f00\u4e3a\u94fe\u8868")),r.a.createElement("li",null,r.a.createElement(a["Link"],{to:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/"},"236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"))),r.a.createElement("h3",{id:"114\u4e8c\u53c9\u6811\u5c55\u5f00\u4e3a\u94fe\u8868"},r.a.createElement(a["AnchorLink"],{to:"#114\u4e8c\u53c9\u6811\u5c55\u5f00\u4e3a\u94fe\u8868","aria-hidden":"true",tabIndex:-1},r.a.createElement("span",{className:"icon icon-link"})),r.a.createElement(a["Link"],{to:"https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/"},"114.\u4e8c\u53c9\u6811\u5c55\u5f00\u4e3a\u94fe\u8868")),r.a.createElement("p",null,"\u597d\u96be\u7406\u89e3\uff01\uff01\uff01 \u53c8\u5f97\u52a8\u624b\u753b"),r.a.createElement(l["a"],{code:"var flatten(root) {\n  while(root) {\n    let temp = root.left\n    if (temp) {\n      while (temp.right) {\n        temp = temp.right\n      }\n      temp.right = root.right\n      root.right = root.left\n      root.left = null\n    }\n    root = root.right\n  }",lang:"js"}),r.a.createElement("h3",{id:"236-\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"},r.a.createElement(a["AnchorLink"],{to:"#236-\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","aria-hidden":"true",tabIndex:-1},r.a.createElement("span",{className:"icon icon-link"})),r.a.createElement(a["Link"],{to:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/"},"236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148")),r.a.createElement(l["a"],{code:"/**\n * @param {TreeNode} root\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {TreeNode}\n */\nvar lowestCommonAncestor = function (root, p, q) {\n  /**\n   * Definition for a binary tree node.\n   * function TreeNode(val) {\n   *     this.val = val;\n   *     this.left = this.right = null;\n   * }\n   */\n  /**\n   * @param {TreeNode} root\n   * @param {TreeNode} p\n   * @param {TreeNode} q\n   * @return {TreeNode}\n   */\n  var lowestCommonAncestor = function (root, p, q) {\n    if (p == root || q == root || !root) return root;\n    let left = lowestCommonAncestor(root.left, p, q);\n    let right = lowestCommonAncestor(root.right, p, q);\n    if (left && right) {\n      return root;\n    }\n    if (left == null && right !== null) {\n      return right;\n    } else if (left !== null && right == null) {\n      return left;\n    } else {\n      return null;\n    }\n  };\n};",lang:"js"})))}));t["default"]=e=>{var t=r.a.useContext(a["context"]),n=t.demos;return r.a.useEffect((()=>{var t;null!==e&&void 0!==e&&null!==(t=e.location)&&void 0!==t&&t.hash&&a["AnchorLink"].scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),r.a.createElement(i,{demos:n})}}}]);
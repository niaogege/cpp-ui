(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[76],{"7xBj":function(e,n,t){"use strict";t.r(n);var r=t("q1tI"),a=t.n(r),o=t("dEAq"),l=t("H1Ra"),i=a.a.memo((e=>{e.demos;return a.a.createElement(a.a.Fragment,null,a.a.createElement("div",{className:"markdown"},a.a.createElement("blockquote",null,a.a.createElement("p",null,"\u8fd8\u662f\u4e0d\u7406\u89e3\u4e8c\u53c9\u6811\u7684\u9012\u5f52\u904d\u5386\u6d41\u7a0b\uff0c\u5728\u6b64\u8bb0\u5f55\u5237\u8fc7\u7684\u4e8c\u53c9\u6811\u9898\u76ee")),a.a.createElement("ul",null,a.a.createElement("li",null,a.a.createElement(o["Link"],{to:"https://leetcode-cn.com/problems/balanced-binary-tree/"},"110.\u5e73\u8861\u4e8c\u53c9\u6811")),a.a.createElement("li",null,a.a.createElement(o["Link"],{to:"https://leetcode-cn.com/problems/same-tree/"},"100.\u76f8\u540c\u7684\u6811")),a.a.createElement("li",null,a.a.createElement(o["Link"],{to:"https://leetcode-cn.com/problems/validate-binary-search-tree/"},"98.\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811")),a.a.createElement("li",null,a.a.createElement(o["Link"],{to:"https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/%5D"},"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6")),a.a.createElement("li",null,a.a.createElement(o["Link"],{to:"https://leetcode-cn.com/problems/symmetric-tree/"},"\u5bf9\u79f0\u4e8c\u53c9\u6811")),a.a.createElement("li",null,a.a.createElement(o["Link"],{to:"https://leetcode-cn.com/problems/diameter-of-binary-tree/"},"\u4e8c\u53c9\u6811\u7684\u76f4\u5f84")),a.a.createElement("li",null,a.a.createElement(o["Link"],{to:"https://leetcode-cn.com/problems/invert-binary-tree/"},"226.\u7ffb\u8f6c\u4e8c\u53c9\u6811")),a.a.createElement("li",null,a.a.createElement(o["Link"],{to:"https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/"},"111.\u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6")),a.a.createElement("li",null,a.a.createElement(o["Link"],{to:"https://leetcode-cn.com/problems/maximum-width-of-binary-tree/"},"662.\u4e8c\u53c9\u6811\u7684\u6700\u5927\u5bbd\u5ea6"))),a.a.createElement("p",null,"\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u5305\u542b\u9012\u5f52\u548c\u8fed\u4ee3\u4e24\u79cd\u65b9\u6cd5\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u5305\u542b\u5c42\u5e8f\u904d\u5386"),a.a.createElement("h3",{id:"110\u5e73\u8861\u4e8c\u53c9\u6811"},a.a.createElement(o["AnchorLink"],{to:"#110\u5e73\u8861\u4e8c\u53c9\u6811","aria-hidden":"true",tabIndex:-1},a.a.createElement("span",{className:"icon icon-link"})),a.a.createElement(o["Link"],{to:"https://leetcode-cn.com/problems/balanced-binary-tree/"},"110.\u5e73\u8861\u4e8c\u53c9\u6811")),a.a.createElement(l["a"],{code:"/**\n * @param {TreeNode} root\n * @return {boolean}\n // \u5de6\u5b50\u6811\u5e73\u8861\u4e14\u53f3\u5b50\u6811\u5e73\u8861\n // \u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u4e0d\u80fd\u8d85\u8fc71\n */\nvar isBalanced = function (root) {\n  if (!root) return true;\n  const leftD = maxDepth(root.left);\n  const rightD = maxDepth(root.right);\n  return Math.abs(leftD - rightD) <= 1 && isBalanced(root.left) && isBalanced(root.right);\n};\nvar maxDepth = (root) => {\n  if (!root) {\n    return 0;\n  } else {\n    return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));\n  }\n};",lang:"js"}),a.a.createElement("h3",{id:"\u76f8\u540c\u7684\u6811"},a.a.createElement(o["AnchorLink"],{to:"#\u76f8\u540c\u7684\u6811","aria-hidden":"true",tabIndex:-1},a.a.createElement("span",{className:"icon icon-link"})),"\u76f8\u540c\u7684\u6811"),a.a.createElement(l["a"],{code:"/**\n * @param {TreeNode} p\n * @param {TreeNode} q\n * @return {boolean}\n * \u786e\u5b9a\u5165\u53c2\n * \u786e\u5b9a\u7ec8\u6b62\u6761\u4ef6\n * \u5355\u5c42\u9012\u5f52\u903b\u8f91\n */\nvar isSameTree = function (p, q) {\n  if (!p && !q) return true;\n  if ((p && !q) || (!p && q)) return false;\n  return p.val === q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n};",lang:"js"}),a.a.createElement("h3",{id:"\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811"},a.a.createElement(o["AnchorLink"],{to:"#\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811","aria-hidden":"true",tabIndex:-1},a.a.createElement("span",{className:"icon icon-link"})),"\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811"),a.a.createElement(l["a"],{code:"/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isValidBST = function (root) {\n  return isValid(root, null, null);\n};\nvar isValid = (root, min, max) => {\n  if (root == null) return true;\n  if (min != null && root.val <= min.val) return false;\n  if (max != null && root.val >= max.val) return false;\n  return isValid(root.left, min, root) && isValid(root.right, root, max);\n};",lang:"js"}),a.a.createElement("h3",{id:"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6"},a.a.createElement(o["AnchorLink"],{to:"#\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6","aria-hidden":"true",tabIndex:-1},a.a.createElement("span",{className:"icon icon-link"})),"\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6"),a.a.createElement("p",null,"\u9012\u5f52\u7b97\u6cd5"),a.a.createElement(l["a"],{code:"/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxDepth = function (root) {\n  if (root === null) {\n    return 0;\n  } else {\n    let leftD = maxDepth(root.left);\n    let rightD = maxDepth(root.right);\n    return 1 + Math.max(leftD, rightD);\n  }\n};",lang:"js"}),a.a.createElement("p",null,"\u8fed\u4ee3\u65b9\u6cd5"),a.a.createElement(l["a"],{code:"function maxDepth(root) {\n  if (root == null) return 0;\n  let depth = 0;\n  let queue = [root];\n  while (queue.length) {\n    let len = queue.length;\n    for (let i = 0; i < len; i++) {\n      let node = queue.shift();\n      if (node.left) {\n        queue.push(node.left);\n      }\n      if (node.right) {\n        queue.push(node.right);\n      }\n    }\n    depth++;\n  }\n  return depth;\n}",lang:"js"}),a.a.createElement("h3",{id:"\u5e73\u8861\u4e8c\u53c9\u6811"},a.a.createElement(o["AnchorLink"],{to:"#\u5e73\u8861\u4e8c\u53c9\u6811","aria-hidden":"true",tabIndex:-1},a.a.createElement("span",{className:"icon icon-link"})),a.a.createElement(o["Link"],{to:"https://leetcode-cn.com/problems/balanced-binary-tree/"},"\u5e73\u8861\u4e8c\u53c9\u6811")),a.a.createElement("p",null,"\u4e00\u4e2a\u4e8c\u53c9\u6811\u6bcf\u4e2a\u8282\u70b9 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1 \u3002"),a.a.createElement(l["a"],{code:"/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isBalanced = function (root) {\n  if (!root) return true;\n  let left = maxDepth(root.left);\n  let right = maxDepth(root.right);\n  return Math.abs(left - right) <= 1 && isBalanced(root.left) && isBalanced(root.right);\n};\nvar maxDepth = function (root) {\n  if (root === null) {\n    return 0;\n  } else {\n    return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));\n  }\n};",lang:"js"}),a.a.createElement("h3",{id:"\u5bf9\u79f0\u4e8c\u53c9\u6811"},a.a.createElement(o["AnchorLink"],{to:"#\u5bf9\u79f0\u4e8c\u53c9\u6811","aria-hidden":"true",tabIndex:-1},a.a.createElement("span",{className:"icon icon-link"})),a.a.createElement(o["Link"],{to:"https://leetcode-cn.com/problems/symmetric-tree/"},"\u5bf9\u79f0\u4e8c\u53c9\u6811")),a.a.createElement(l["a"],{code:"//dfs\nvar isSymmetric = function (root) {\n  if (root == null) return true;\n  const dfs = (p, q) => {\n    if (!p && !q) return true;\n    if (!p || !q) return false;\n    if (p.val !== q.val) return false;\n    if (dfs(p.left, q.right) && dfs(p.right, q.left)) {\n      return true;\n    }\n    return false;\n  };\n  return dfs(root, root);\n};\n// bfs\nvar isSymmetric = function (root) {\n  const isMirror = (l, r) => {\n    const queue = [l, r];\n    while (queue.length) {\n      const u = queue.shift();\n      const v = queue.shift();\n      if (!v && !u) continue;\n      if (!v || !u || v.val != u.val) return false;\n      queue.push(u.left, v.right);\n      queue.push(u.right, v.left);\n    }\n    return true;\n  };\n  return isMirror(root, root);\n};",lang:"js"}),a.a.createElement("h3",{id:"\u4e8c\u53c9\u6811\u7684\u76f4\u5f84"},a.a.createElement(o["AnchorLink"],{to:"#\u4e8c\u53c9\u6811\u7684\u76f4\u5f84","aria-hidden":"true",tabIndex:-1},a.a.createElement("span",{className:"icon icon-link"})),a.a.createElement(o["Link"],{to:"https://leetcode-cn.com/problems/diameter-of-binary-tree/"},"\u4e8c\u53c9\u6811\u7684\u76f4\u5f84")),a.a.createElement(l["a"],{code:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n * \u5de6\u8282\u70b9\u9ad8\u5ea6+\u53f3\u8282\u70b9\u9ad8\u5ea6\n */\nvar diameterOfBinaryTree = function (root) {\n  let max = 0;\n  const dfs = (root) => {\n    if (!root) return 0;\n    let l = dfs(root.left);\n    let r = dfs(root.right);\n    if (l + r > max) {\n      max = l + r;\n    }\n    return Math.max(l, r) + 1;\n  };\n  return max;\n};",lang:"js"}),a.a.createElement("h3",{id:"\u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6"},a.a.createElement(o["AnchorLink"],{to:"#\u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6","aria-hidden":"true",tabIndex:-1},a.a.createElement("span",{className:"icon icon-link"})),a.a.createElement(o["Link"],{to:"https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/"},"\u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6")),a.a.createElement(l["a"],{code:"/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDepth = function (root) {\n  if (root == null) return 0;\n  if (root.left == null && root.right === null) return 1;\n  let ans = -Infinity;\n  if (root.left) {\n    ans = Math.min(minDepth(root.left), ans);\n  }\n  if (root.right) {\n    ans = Math.min(minDepth(root.right), ans);\n  }\n  return ans + 1;\n};",lang:"js"}),a.a.createElement("h3",{id:"226\u7ffb\u8f6c\u4e8c\u53c9\u6811"},a.a.createElement(o["AnchorLink"],{to:"#226\u7ffb\u8f6c\u4e8c\u53c9\u6811","aria-hidden":"true",tabIndex:-1},a.a.createElement("span",{className:"icon icon-link"})),a.a.createElement(o["Link"],{to:"https://leetcode-cn.com/problems/invert-binary-tree/"},"226.\u7ffb\u8f6c\u4e8c\u53c9\u6811")),a.a.createElement(l["a"],{code:"/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nvar invertTree = function (root) {\n  if (root == null) return null;\n  let temp = root.left;\n  root.left = root.right;\n  root.right = temp;\n  invertTree(root.left);\n  invertTree(root.right);\n  return root;\n};",lang:"js"}),a.a.createElement("h3",{id:"\u4e8c\u53c9\u6811\u6700\u5927\u5bbd\u5ea6"},a.a.createElement(o["AnchorLink"],{to:"#\u4e8c\u53c9\u6811\u6700\u5927\u5bbd\u5ea6","aria-hidden":"true",tabIndex:-1},a.a.createElement("span",{className:"icon icon-link"})),a.a.createElement(o["Link"],{to:"https://leetcode-cn.com/problems/maximum-width-of-binary-tree/"},"\u4e8c\u53c9\u6811\u6700\u5927\u5bbd\u5ea6")),a.a.createElement(l["a"],{code:"var widthOfBinaryTree = function (root) {\n  if (root == null) return 0;\n  let queue = [[0n, root]];\n  let ans = 1n;\n  while (queue.length) {\n    let width = queue[queue.length - 1][0] - queue[0][0] + 1n;\n    if (width > ans) {\n      ans = width;\n    }\n    let temp = [];\n    for (const [i, q] of queue) {\n      q.left && temp.push([i * 2n, q.left]);\n      q.right && temp.push([i * 2n + 1n, q.right]);\n    }\n    queue = temp;\n  }\n  return Number(ans);\n};",lang:"js"}),a.a.createElement("p",null,"\u540e\u9762\u7684\u51e0\u4e2a\u6d4b\u8bd5\u6848\u4f8b\u76ee\u524d\u8fd8\u662f\u6ca1\u6709\u901a\u8fc7\u7684"),a.a.createElement(l["a"],{code:"/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar widthOfBinaryTree = function (root) {\n  if (!root) return 0;\n  let queue = [root]; // \u5b58\u50a8\u8282\u70b9\n  let numArr = [0]; // \u5b58\u50a8\u7d22\u5f15\n  let max = 1;\n  while (queue.length) {\n    let tempQueue = [],\n      tempNumarr = [];\n    while (queue.length) {\n      let node = queue.shift();\n      let num = numArr.shift();\n      if (node.left) {\n        tempQueue.push(node.left);\n        tempNumarr.push(num * 2 + 1);\n      }\n      if (node.right) {\n        tempQueue.push(node.right);\n        tempNumarr.push(num * 2 + 2);\n      }\n    }\n    let tempMax = 0;\n    if (tempNumarr.length) {\n      tempMax = tempNumarr[tempNumarr.length - 1] - tempNumarr[0] + 1;\n    }\n    max = Math.max(max, tempMax);\n    queue = tempQueue;\n    numArr = tempNumarr;\n  }\n  return max;\n};",lang:"js"})))}));n["default"]=e=>{var n=a.a.useContext(o["context"]),t=n.demos;return a.a.useEffect((()=>{var n;null!==e&&void 0!==e&&null!==(n=e.location)&&void 0!==n&&n.hash&&o["AnchorLink"].scrollToAnchor(decodeURIComponent(e.location.hash.slice(1)))}),[]),a.a.createElement(i,{demos:t})}}}]);